// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js関連のモデル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      ProjectMember[]
  tasks         Task[]
  comments      Comment[]
  createdTasks  Task[]   @relation("CreatedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// アプリケーション固有のモデル
model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     ProjectMember[]
  tasks       Task[]
}

model ProjectMember {
  id        String    @id @default(cuid())
  role      String    // OWNER, ADMIN, MEMBER
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  joinedAt  DateTime  @default(now())

  @@unique([projectId, userId])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    // TODO, IN_PROGRESS, DONE, ON_HOLD
  priority    String?   // HIGH, MEDIUM, LOW
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  
  assignee    User?     @relation(fields: [assigneeId], references: [id])
  assigneeId  String?
  
  creator     User      @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId   String
  
  comments    Comment[]
  tags        TaskTag[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  color       String?
  tasks       TaskTag[]
}

model TaskTag {
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String

  @@id([taskId, tagId])
} 